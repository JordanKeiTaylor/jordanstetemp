#!/bin/bash
set -e
set -o posix

usage() {
	echo "$(basename $0) <command> [OPTIONS]"
	echo ""
	echo "Variables"
	echo "   INVENTORY_FILE - env variable pointing to ansible inventory file"
	echo "Commands"
	echo "    -h/help                  - This help message"
	echo "    bootstrap               - bootstrap machines"
	echo "    swarm_up                 - bring up the swarm"
	echo "    swarm_down               - take down the swarm"
	echo "    apply_base_roles         - apply base roles (base,docker) to all hosts"
	echo "    run_stack                - start the SpatialOS stack"
	echo "    stop_stack               - stop the SpatialOS stack"
	echo "    proxt_skrull <host>      - proxy a load of useful stuff (including Skrull APi)"
	echo "    proxy_prometheus <host>  - proxy Prometheus to localhost:9092"
	echo "    proxy_inspector <host>   - proxy Inspector to localhost:21002"
	echo "    cmd <role|all> <command> - Run an ad-hoc command on hosts"
	echo "OPTIONS will be passed through to ansible-playbook or ansible"
	exit 0
}

if [ "$1" = "help" ] || [ "$1" = "-h" ] || [ $# -eq 0 ]; then
	usage
fi

if [ -z ${INVENTORY_FILE} ]; then
	echo "INVENTORY_FILE not set"
	exit 1
fi

if ! command -v ansible-playbook 2>&1 >/dev/null; then
	echo "ansible-playbook not in \$PATH"
	exit 1
fi

run_playbook() {
	local playbook=playbooks/${1}
	set -x
	ansible-playbook -e @vars.yml -i ${INVENTORY_FILE} ${playbook} ${@:2}
	set +x
}

do_bootstrap() {
	local remote_user="$1"
	run_playbook bootstrap.yml -e @ssh_keys.yml -e "ansible_user=$remote_user" ${@:2}
}

do_swarm_up() {
	run_playbook swarm_up.yml ${@}
}

do_swarm_down() {
	run_playbook swarm_down.yml ${@}
}

do_apply_base_roles() {
	run_playbook apply_base_roles.yml ${@}
}

do_run_stack() {
	run_playbook run_stack.yml ${@}
}

do_stop_stack() {
	run_playbook stop_stack.yml ${@}
}

do_proxy() {
	local remote_host="$1"
	local remote_port="$2"
	local local_host="$3"
	local local_port="$4"
	set -x
	ssh -N -L $local_port:$local_host:$remote_port $remote_host
	set +x
}

do_proxy_skrull() {
	local remote_host="$1"
	set -x
	ssh -N -L 21000:localhost:21000 -L 8080:localhost:8080 -L 8081:localhost:8081 -L 8082:localhost:8082 $remote_host
	set +x
}

do_adhoc_command() {
	local host_pattern="$1"
	local cmd="$2"
	set -x
	ansible ${host_pattern} -i ${INVENTORY_FILE} -a "${cmd}" ${@:3}
	set +x
}

case "$1" in
	bootstrap)
		if [ -z "$2" ]; then
			echo "MISSING REMOTE USER" >&2
			echo
			usage
		fi
		do_bootstrap $2 ${@:3}
	;;
	swarm_up)
		do_swarm_up ${@:2}
	;;
	swarm_down)
		do_swarm_down ${@:2}
	;;
	apply_roles)
		do_apply_roles ${@:2}
	;;
	apply_base_roles)
		do_apply_base_roles ${@:2}
	;;
	apply_proj_roles)
		do_apply_proj_roles ${@:2}
	;;
	run_stack)
		do_run_stack ${@:2}
	;;
	stop_stack)
		do_stop_stack ${@:2}
	;;
	proxy_skrull)
		if [ -z "$2" ]; then
			echo "MISSING REMOTE_HOST" >&2
			echo
			usage
		fi
		do_proxy_skrull $2
	;;
	proxy_prometheus)
		if [ -z "$2" ]; then
			echo "MISSING REMOTE_HOST" >&2
			echo
			usage
		fi
		do_proxy $2 9090 localhost 9092
	;;
	proxy_inspector)
		if [ -z "$2" ]; then
			echo "MISSING REMOTE_HOST" >&2
			echo
			usage
		fi
		do_proxy $2 21000 localhost 21002
	;;
	cmd)
		if [ -z "$2" ] || [ -z "$3" ]; then
			echo "CMD MISSING PARAMETERS" >&2
			echo
			usage
		fi
		do_adhoc_command "$2" "$3" ${@:4}
	;;
esac
