import org.ajoberstar.grgit.Grgit
import org.gradle.internal.os.OperatingSystem

plugins {
  id 'org.ajoberstar.grgit' version '1.7.2' apply false
  id "cpp-library"
}

def clonePath = file("$buildDir/recastnavigation")
def recastRef = "ba12abead9956e69afa1248e535b07249df45e48"
def libRecastLib = file(OperatingSystem.current().getStaticLibraryName("$clonePath/Recast/Recast"))
def libDetourLib = file(OperatingSystem.current().getStaticLibraryName("$clonePath/Detour/Detour"))
def libRecastIncludePath = file("$clonePath/Recast/Include")
def libDetourIncludePath = file("$clonePath/Detour/Include")

task(cloneRecast) {
    doLast {
        if (!clonePath.exists()) {
            println("Cloning recast")
            Grgit.clone(
                    dir: clonePath,
                    uri: 'https://github.com/recastnavigation/recastnavigation.git',
                    refToCheckout: recastRef
            )
        }

        println("Resetting recast to: $recastRef")
        Grgit.open(dir: clonePath).reset(mode: "HARD", commit: recastRef)
    }
}

task premakeRecast(type: Exec) {
  workingDir clonePath
  commandLine "cmake", ".", "-DRECASTNAVIGATION_DEMO=OFF", "-DRECASTNAVIGATION_STATIC=ON"
  dependsOn cloneRecast
}

task buildRecast(type: Exec) {
    workingDir clonePath
    commandLine "make"
    dependsOn "premakeRecast"
}

library {
    baseName.set("recastwrapper")
}

assemble.dependsOn(buildRecast)

components.main.binaries.whenElementFinalized { binary ->
    project.dependencies {
        add(binary.linkLibraries.name, files(libRecastLib))
        add(binary.linkLibraries.name, files(libDetourLib))
        add(binary.includePathConfiguration.name, files(libRecastIncludePath))
        add(binary.includePathConfiguration.name, files(libDetourIncludePath))
    }
}